# Name
portfolio_name = "Simple"
# Path of module
module = "presso.module.portfolio.simple.SimplePortfolio"
# Realtime is true means all DataEvents are generated at the same time
# false means they will be ordered by timestamp
realtime = false
events = ["TICK", "CANDLE_STICK", "CHECK_ORDERS"]
[log]
# Default log level
level = "info"
# Default log path
file = "presso.log"
# Redis database url and port
[redis]
url = "localhost"
port = 6379
db = 0
# Config will be passed to _init() as a dict object
[config]
# pair to trade
base = "BTC"
quote = "USDT"

[[reports]]
    name = "csv_report"
    module = "presso.module.report.csv_report.CSVReport"
    [reports.config]
        path = "report.txt"

#[[dataevents]]
#    name = "bitfinex_kline"
#    module = "presso.module.dataevent.bitfinex_kline.BitfinexKlineDataEvent"
#    data_path = "https://api.bitfinex.com/v2/candles"
#    # All generated DataEvents will be stored as a npy file if the path is not empty
#    history_file = "data/history/bitfinex_kline.npy"
#    [dataevents.config]
#        time_frame = "1m"
#        market = "BTCUSD"
#        start_time = 1508248900
#        end_time = 1508255000

#[[dataevents]]
#    name = "csv_kline"
#    module = "presso.module.dataevent.csv_kline.CsvKlineDataEvent"
#    data_path = "data/history/coinbaseUSD_1-min_data_2017-10-20.csv"
#    history_file = ""
#    [dataevents.config]

[[dataevents]]
    name = "sql_kline"
    module = "presso.module.dataevent.sqlite_kline.SQLiteKlineDataEvent"
    data_path = "data/sql/crypto.db"
    history_file = ""
    [dataevents.config]
        init_n = 100
        query = """
            SELECT
                date, symbol, granularity, open, high, low, close, volume
            FROM
                stocks
            WHERE 1=1
                and symbol = 'BTCUSDT'
                and date between strftime('%s','2017-08-20 00:00:00')*1000 and strftime('%s','2017-09-01 00:00:00')*1000
                and granularity=15
            ORDER BY
                date asc
            """

#[[dataevents]]
#    name = "npy_kline"
#    module = "presso.module.dataevent.npy_kline.NpyKlineDataEvent"
#    data_path = "data/history/bitfinex_kline.npy"
#    history_file = ""
#    [dataevents.config]


[[alphas]]
    name = "Printer"
    module = "presso.module.alpha.printer.PrinterAlpha"
    # Alpha is triggered by its main DataEvent
    main_dataevent = "sql_kline"
    # Alpha also can access other DataEvents
    dataevents = []
    # The events that triggers this strategy
    events = ["CANDLE_STICK", "HISTO_DATA"]
    [alphas.config]
        # number of data size stored (ohlc + indicators)
        n = 100
        [[alphas.config.indicators]]
            type = "sma"
            name = "sma20"
            [alphas.config.indicators.config]
                n = 10

[[alphas]]
    name = "CheckOrder"
    module = "presso.module.alpha.check_order.CheckOrderAlpha"
    # Alpha is triggered by its main DataEvent
    main_dataevent = "sql_kline"
    # Alpha also can access other DataEvents
    dataevents = []
    # The events that triggers this strategy
    events = ["CHECK_ORDERS", ]
    [alphas.config]

[[alphas]]
    name = "Ticker"
    module = "presso.module.alpha.ticker.TickerAlpha"
    # Alpha is triggered by its main DataEvent
    main_dataevent = "sql_kline"
    # Alpha also can access other DataEvents
    dataevents = []
    # The events that triggers this strategy
    events = ["TICK", ]
    [alphas.config]


[connector]
name = "kline_history"
module = "presso.module.connector.kline_history.KlineHistoryConnector"
# Connector may use data from DataEvents to calculate price
[connector.config]


[[statistics]]
    name = "Logger"
    module = "presso.module.statistics.logger.LoggerStatistics"
    [statistics.config]
